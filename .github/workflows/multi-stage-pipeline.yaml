name: MultiStage Pipeline

on:
  repository_dispatch:
    types: [infra_commit, app_commit, api_commit, lambda_commit, db_commit]

jobs:
  initial-setup:
    if: github.event.action == 'infra_commit'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Init Global Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform init
        working-directory: terraform/us-east-1/global

      - name: Plan Global Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform plan
        working-directory: terraform/us-east-1/global

      - name: Apply Global Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ success() }}
        run: terraform apply -auto-approve
        working-directory: terraform/us-east-1/global

  vpc-setup:
    runs-on: ubuntu-latest
    needs: initial-setup

    steps:   
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
  
      - name: Init VPC Setup
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
              AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform init
        working-directory: terraform/us-east-1/network/vpc

    
      - name: Plan VPC Setup
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
              AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform plan
        working-directory: terraform/us-east-1/network/vpc


      - name: Apply VPC Setup
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
              AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ success() }}
        run: terraform apply -auto-approve
        working-directory: terraform/us-east-1/network/vpc  

  securitygroup-setup:
    runs-on: ubuntu-latest
    needs: vpc-setup

    steps:   
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
  
      - name: Init Security Group Setup
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
              AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform init
        working-directory: terraform/us-east-1/compute/securitygroup

    
      - name: Plan Security Group Setup
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
              AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform plan
        working-directory: terraform/us-east-1/compute/securitygroup


      - name: Apply Security Group Setup
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
              AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ success() }}
        run: terraform apply -auto-approve
        working-directory: terraform/us-east-1/compute/securitygroup  
        
  eks-setup:
    runs-on: ubuntu-latest
    needs: securitygroup-setup

    steps:   
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
  
      - name: Init EKS Setup
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
              AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform init
        working-directory: terraform/us-east-1/compute/eks/mithrandir

    
      - name: Plan EKS Setup
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
              AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform plan
        working-directory: terraform/us-east-1/compute/eks/mithrandir


      - name: Apply EKS Setup
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
              AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ success() }}
        run: terraform apply -auto-approve
        working-directory: terraform/us-east-1/compute/eks/mithrandir
  

  app_pipeline:
    if: github.event.action == 'app_commit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout App Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/snackbar'
          token: ${{ secrets.GH_TOKEN}}

      - name: Run Tests
        run: mvn -f backend/pom.xml test 

      - name: Build App
        run: npm -f backend/pom.xml run build

      - name: Deploy App
        run: ./deploy.sh

  api_pipeline:
    if: github.event.action == 'api_commit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout API Gateway Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/api-gateway'
          token: ${{ secrets.GH_TOKEN }}

      - name: Deploy API Gateway
        run: terraform apply -auto-approve

  lambda_pipeline:
    if: github.event.action == 'lambda_commit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Lambda Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/lambda'
          token: ${{ secrets.GH_TOKEN }}

      - name: Deploy Lambda
        run: terraform apply -auto-approve

  db_pipeline:
    if: github.event.action == 'db_commit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout DB Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/db'
          token: ${{ secrets.GH_TOKEN}}

      - name: Apply DB Changes
        run: terraform apply -auto-approve
