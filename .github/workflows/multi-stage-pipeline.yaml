name: MultiStage Pipeline

on:
  workflow_dispatch:

jobs:

  setup-bucket:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Configure S3 Bucket
        continue-on-error: true
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
            BUCKET_S3: ${{ secrets.BUCKET_S3 }}
        run: |
          aws s3api create-bucket --bucket ${{ secrets.BUCKET_S3 }} --region us-east-1

  install-helm-chart-repo:
    runs-on: ubuntu-latest
    needs: setup-bucket
    if: always()

    steps:
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}          
          
      - name: Init Helm
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
            BUCKET_S3: ${{ secrets.BUCKET_S3 }}
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git
          helm s3 init s3://${{ secrets.BUCKET_S3 }} --ignore-if-exists
          helm repo add snackbar-charts s3://${{ secrets.BUCKET_S3 }}
          helm package helm-chart/snackbar-app/
          helm s3 push snackbar-app-1.0.0.tgz snackbar-charts --force
          
  global-setup:
    runs-on: ubuntu-latest
    needs: install-helm-chart-repo
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Init Global Setup
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3}}"
        working-directory: terraform/us-east-1/global

      - name: Plan Global Setup
        run: terraform plan
        working-directory: terraform/us-east-1/global

      - name: Apply Global Setup
        if: ${{ success() }}
        run: terraform apply -auto-approve
        working-directory: terraform/us-east-1/global

  vpc-setup:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    needs: global-setup

    steps:   
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
  
      - name: Init VPC Setup
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3}}"
        working-directory: terraform/us-east-1/network/vpc

      - name: Plan VPC Setup
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
        working-directory: terraform/us-east-1/network/vpc

      - name: Apply VPC Setup
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve
        working-directory: terraform/us-east-1/network/vpc  

  securitygroup-setup:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    needs: vpc-setup
    
    steps:   
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
  
      - name: Init Security Group Setup
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3}}"
        working-directory: terraform/us-east-1/compute/securitygroup

      - name: Plan Security Group Setup
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
        working-directory: terraform/us-east-1/compute/securitygroup

      - name: Apply Security Group Setup
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve
        working-directory: terraform/us-east-1/compute/securitygroup  
        
  eks-setup:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    needs: securitygroup-setup

    steps:   
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
  
      - name: Init EKS Setup
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3}}"
        working-directory: terraform/us-east-1/compute/eks/mithrandir

      - name: Plan EKS Setup
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
        working-directory: terraform/us-east-1/compute/eks/mithrandir

      - name: Apply EKS Setup
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve
        working-directory: terraform/us-east-1/compute/eks/mithrandir
  
  unit-tests:
    runs-on: ubuntu-latest
    needs: eks-setup

    steps:

      - name: Checkout App Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/snackbar'
          token: ${{ secrets.GH_TOKEN}}
          ref: ${{ github.event.client_payload.branch == 'main' || github.event_name == 'workflow_dispatch' && 'main' || 'homolog' }}

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn -f backend/pom.xml clean install --no-transfer-progress
      
      - name: Run unit tests
        run: mvn -f backend/pom.xml test --no-transfer-progress

  code-analysis:
    runs-on: ubuntu-latest
    needs: eks-setup

    steps:
    - name: Checkout App Repo
      uses: actions/checkout@v3
      with:
        repository: 'fiap-9soat-snackbar/snackbar'
        token: ${{ secrets.GH_TOKEN}}
        ref: ${{ github.event.client_payload.branch == 'main' || github.event_name == 'workflow_dispatch' && 'main' || 'homolog' }}

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Run SonarCloud Analysis
      run: |
        mvn -f backend/pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar \
          -Dsonar.projectKey=fiap-9soat-snackbar_snackbar \
          -Dsonar.organization=fiap-9soat-snackbar \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \

  build-and-push:
    runs-on: ubuntu-latest
    env:
      MONGODB_USER: ${{ secrets.MONGODB_USER }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      DB_HOST: ${{ secrets.MONGO_HOST }}
      APP_DB: ${{ secrets.MONGO_APP_DB }}
      JWT_EXPIRES: ${{ secrets.JWT_EXPIRES }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    needs: [unit-tests, code-analysis]

    steps:

    - name: Checkout App Repo
      uses: actions/checkout@v3
      with:
        repository: 'fiap-9soat-snackbar/snackbar'
        token: ${{ secrets.GH_TOKEN}}
        ref: ${{ github.event.client_payload.branch == 'main' || github.event_name == 'workflow_dispatch' && 'main' || 'homolog' }}


    - name: Set Docker image tag based on branch
      run: |
          echo "APP_NAME=snackbar" >> $GITHUB_ENV
          if [[ "${{ github.event.client_payload.branch }}" == "main" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=homolog" >> $GITHUB_ENV
          fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Snackbar Docker image
      run: |
        set -x
        cd backend
        docker buildx build --platform linux/amd64,linux/arm64 \
           -t ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} \
           --push .
        
    - name: Docker logout
      run: docker logout

  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    needs: [build-and-push]

    steps:
  

      - name: Install Helm
        run: |
              curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  
      - name: Configure kubectl for EKS
        run: aws eks update-kubeconfig --name snackbar-mithrandir --region ${{ vars.AWS_DEFAULT_REGION}}

      - name: Set Helm variables
        run: |
              echo "APP_NAME=snackbar" >> $GITHUB_ENV
              if [[ "${{ github.event.client_payload.branch }}" == "main" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                echo "IMAGE_TAG=latest" >> $GITHUB_ENV
                echo "DEPLOY_NAME=snackbar-prod" >> $GITHUB_ENV
                echo "APP_NAMESPACE=prod" >> $GITHUB_ENV
              else
                echo "IMAGE_TAG=homolog" >> $GITHUB_ENV
                echo "DEPLOY_NAME=snackbar-homolog" >> $GITHUB_ENV
                echo "APP_NAMESPACE=homolog" >> $GITHUB_ENV
              fi
  
      - name: Helm Upgrade/Install
        run: |
              helm plugin install https://github.com/hypnoglow/helm-s3.git
              helm repo add snackbar-charts s3://${{ secrets.BUCKET_S3 }}
    
              helm upgrade --install ${{ env.DEPLOY_NAME }} snackbar-charts/snackbar-app \
                --namespace ${{ env.APP_NAMESPACE }} \
                --create-namespace \
                --set IMAGE.TAG=${{ env.IMAGE_TAG }}

             # --set SECRET.DATABASE.MONGODB_USER=${{ secrets.MONGODB_USER }} \
             # --set SECRET.DATABASE.MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }} \
             # --set SECRET.DATABASE.DB_HOST=${{ secrets.MONGO_HOST  }} \
             # --set SECRET.DATABASE.APP_DB=${{ secrets.MONGO_APP_DB }} \
             # --set SECRET.DATABASE.DB_PORT=${{ secrets.DB_PORT }} \
             # --set SECRET.JWT.EXPIRES=${{ secrets.JWT_EXPIRES }} \
             # --set SECRET.JWT.SECRET=${{ secrets.JWT_SECRET }}

  database-setup:
    runs-on: ubuntu-latest
    needs: securitygroup-setup
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    steps:
      - name: Checkout DB Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/snackbar-database'
          token: ${{ secrets.GH_TOKEN}}
              
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

      - name: Install MongoDB CLI
        run: |
              wget -qO- https://www.mongodb.org/static/pgp/server-8.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-8.0.asc
              echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu noble/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
              sudo apt-get update
              sudo apt-get install -y mongodb-mongosh

      - name: Get NAT Gateway Public IP
        id: get_nat_ip
        run: |
          NAT_IP=$(aws ec2 describe-nat-gateways --query "NatGateways[0].NatGatewayAddresses[0].PublicIp" --output text)
          echo "NAT_IP=$NAT_IP" >> $GITHUB_ENV
        
      - name: Use NAT Gateway IP
        run: |
          echo "O IP público do NAT Gateway é: ${{ env.NAT_IP }}"

      - name: Create DB variables.auto.tfvars
        run: |
            cat <<EOF > variables.auto.tfvars
            org_id="${{ secrets.ORG_ID }}"
            aws_nat_gateway="${{ env.NAT_IP }}"
            mongodbatlas_org_public_key="${{ secrets.MONGODBATLAS_ORG_PUBLIC_KEY }}"
            mongodbatlas_org_private_key="${{ secrets.MONGODBATLAS_ORG_PRIVATE_KEY }}"
            mongodbatlas_username="${{ secrets.MONGODBATLAS_USERNAME }}"
            mongodbatlas_password="${{ secrets.MONGODBATLAS_PASSWORD }}"
            MONGODB_USER="${{ secrets.MONGODB_USER }}"
            MONGODB_PASSWORD="${{ secrets.MONGODB_PASSWORD }}"
            EOF

      - name: Init Dababase Setup
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3 }}"
 
      - name: Plan Dababase Setup
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
    
      - name: Apply Dababase Setup
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve


  lambda_pipeline:
    runs-on: ubuntu-latest
    needs: deploy
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout Lambda Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/snackbar-lambda'
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
            terraform_version: 1.3.6

      - name: Create DB variables.auto.tfvars
        run: |
            cat <<EOF > variables.auto.tfvars
            jwt_secret="${{ secrets.JWT_SECRET }}"
            EOF

      - name: Init Lambda Setup
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3 }}"
     
      - name: Plan Lambda Setup
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
        
      - name: Apply Lambda Setup
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve
  

  api_pipeline:
    runs-on: ubuntu-latest
    needs: [deploy,lambda_pipeline]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout API Gateway Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/snackbar-api-gateway'
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
            terraform_version: 1.3.6
      
      - name: Get ELB DNS Name
        id: get_elb_dns
        run: |
          DNS_NAME=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[0].DNSName" --output text)
          echo "DNS_NAME=$DNS_NAME" >> $GITHUB_ENV
      
      - name: Use ELB DNS
        run: |
          echo "O DNS do Load Balancer é: ${{ env.DNS_NAME }}"

      - name: Create API GATEWAY variables.auto.tfvars
        run: |
            cat <<EOF > variables.auto.tfvars
            alb_dns_name="${{ env.DNS_NAME }}"
            EOF

      - name: Init API Gateway Setup
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3 }}"
      
      - name: Plan API Gateway Setup
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
        
      - name: Apply API Gateway Setup
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve  

  app_ready:
    runs-on: ubuntu-latest
    needs: api_pipeline
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Get APP DNS Name
        id: get_elb_dns
        run: |
          DNS_NAME=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[0].DNSName" --output text)
          echo "O endereço da Aplicacão Snackbar é: $DNS_NAME/actuator/health" 

      - name: Get API GATEWAY ENDPOINT Name
        id: get_api_gateway_endpoint
        run: |
          API_GATEWAY_ENDPOINT=$(aws apigatewayv2 get-apis --query 'Items[?Name==`snackbar-api`].ApiEndpoint' --output text)
          echo "o endereço do API Gateway Endpoint é: $API_GATEWAY_ENDPOINT" 



