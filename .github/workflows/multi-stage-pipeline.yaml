name: MultiStage Pipeline

on:
  repository_dispatch:
    types: [infra_commit, app_commit, api_commit, lambda_commit, db_commit]

jobs:
  global-setup:
    if: github.event.action == 'infra_commit'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Init Global Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3}}"
        working-directory: terraform/us-east-1/global

      - name: Plan Global Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform plan
        working-directory: terraform/us-east-1/global

      - name: Apply Global Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ success() }}
        run: terraform apply -auto-approve
        working-directory: terraform/us-east-1/global

  vpc-setup:
    runs-on: ubuntu-latest
    needs: global-setup

    steps:   
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
  
      - name: Init VPC Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3}}"
        working-directory: terraform/us-east-1/network/vpc

    
      - name: Plan VPC Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
        working-directory: terraform/us-east-1/network/vpc


      - name: Apply VPC Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve
        working-directory: terraform/us-east-1/network/vpc  

  securitygroup-setup:
    runs-on: ubuntu-latest
    needs: vpc-setup
    
    steps:   
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
  
      - name: Init Security Group Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3}}"
        working-directory: terraform/us-east-1/compute/securitygroup

    
      - name: Plan Security Group Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
        working-directory: terraform/us-east-1/compute/securitygroup


      - name: Apply Security Group Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve
        working-directory: terraform/us-east-1/compute/securitygroup  
        
  eks-setup:
    runs-on: ubuntu-latest
    needs: securitygroup-setup

    steps:   
      - name: Checkout Kubernetes Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/eks'
          token: ${{ secrets.GH_TOKEN}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
  
      - name: Init EKS Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3}}"
        working-directory: terraform/us-east-1/compute/eks/mithrandir

    
      - name: Plan EKS Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
        working-directory: terraform/us-east-1/compute/eks/mithrandir


      - name: Apply EKS Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve
        working-directory: terraform/us-east-1/compute/eks/mithrandir
  

  unit-tests:
    if: github.event.action == 'app_commit'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout App Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/snackbar'
          token: ${{ secrets.GH_TOKEN}}
          ref: 'feature/pipelines'

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn -f backend/pom.xml clean install --no-transfer-progress
      
      - name: Run unit tests
        run: mvn -f backend/pom.xml test --no-transfer-progress

  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout App Repo
      uses: actions/checkout@v3
      with:
        repository: 'fiap-9soat-snackbar/snackbar'
        token: ${{ secrets.GH_TOKEN}}
        ref: 'feature/pipelines'

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Run SonarCloud Analysis
      run: |
        mvn -f backend/pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar \
          -Dsonar.projectKey=fiap-9soat-snackbar_snackbar \
          -Dsonar.organization=fiap-9soat-snackbar \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [unit-tests, code-analysis]

    steps:
    - name: Checkout App Repo
      uses: actions/checkout@v3
      with:
        repository: 'fiap-9soat-snackbar/snackbar'
        token: ${{ secrets.GH_TOKEN}}
        ref: 'feature/pipelines'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set Docker image tag based on branch
      run: |
        if [[ "${{ github.event.client_payload.branch }}" == "main" ]]; then
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
        elif [[ "${{ github.event.client_payload.branch }}" != "main" ]]; then
          echo "IMAGE_TAG=homolog" >> $GITHUB_ENV
        fi
        
    - name: Set Docker repo Snackbar
      run: echo "DOCKER_REPO_SNACKBAR=snackbar" >> $GITHUB_ENV
      
    - name: Build and push Snackbar Docker image
      run: |
        set -x
        cd backend
        docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPO_SNACKBAR }}:${{ env.IMAGE_TAG }} --push --no-cache .

    - name: Docker logout
      run: docker logout

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]

    steps:
        - name: Install Helm
          run: |
               curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
   
        - name: Configure kubectl for EKS
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          run: aws eks update-kubeconfig --name snackbar-mithrandir --region ${{ secrets.AWS_DEFAULT_REGION }}
   
        - name: Init Helm
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          run: |
               helm plugin install https://github.com/hypnoglow/helm-s3.git
               helm repo add snackbar-charts s3://fiap-9soat-snackbar
   
        - name: Helm Upgrade/Install
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          run: |
               helm upgrade --install snackbar snackbar-charts/snackbar-app \
               --namespace ns-snackbar \
               --create-namespace \
               --set image.repository=${{ secrets.DOCKER_USERNAME }}/snackbar \
               --set image.tag=latest
   
  database-setup:
    if: github.event.action == 'db_commit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout DB Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/snackbar-database'
          token: ${{ secrets.GH_TOKEN}}
              

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

      - name: Install MongoDB CLI
        run: |
              wget -qO- https://www.mongodb.org/static/pgp/server-8.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-8.0.asc
              echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu noble/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
              sudo apt-get update
              sudo apt-get install -y mongodb-mongosh
              IP=$(curl -s ifconfig.me)
              echo "O IP do runner é: $IP"
              sleep 10

      - name: Create DB variables.auto.tfvars
        run: |
            cat <<EOF > variables.auto.tfvars
            org_id="${{ secrets.ORG_ID }}"
            aws_nat_gateway="${{ secrets.AWS_NAT_GATEWAY }}"
            mongodbatlas_org_public_key="${{ secrets.MONGODBATLAS_ORG_PUBLIC_KEY }}"
            mongodbatlas_org_private_key="${{ secrets.MONGODBATLAS_ORG_PRIVATE_KEY }}"
            mongodbatlas_username="${{ secrets.MONGODBATLAS_USERNAME }}"
            mongodbatlas_password="${{ secrets.MONGODBATLAS_PASSWORD }}"
            MONGODB_USER="${{ secrets.MONGODB_USER }}"
            MONGODB_PASSWORD="${{ secrets.MONGODB_PASSWORD }}"
            EOF

      - name: Init Dababase Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_S3 }}"

        
      - name: Plan Dababase Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: terraform plan -var="bucket=${{ secrets.BUCKET_S3 }}"
    
      - name: Apply Dababase Setup
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        if: ${{ success() }}
        run: terraform apply -var="bucket=${{ secrets.BUCKET_S3 }}" -auto-approve
  
   #   - name: Run MongoDB Scripts
   #     env:
   #       MONGODB_USER: ${{ secrets.MONGODB_USER }}
   #       MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
   #       MONGODBATLAS_USERNAME: ${{ secrets.MONGODBATLAS_USERNAME }}
   #       MONGODBATLAS_PASSWORD: ${{ secrets.MONGODBATLAS_PASSWORD }}
   #       MONGO_HOST: ${{ secrets.MONGO_HOST}}
   #     run: |
   #       EXISTS_PRODUCTS=$(mongosh "$MONGO_HOST" --username $MONGODBATLAS_USERNAME --password $MONGODBATLAS_PASSWORD --eval "db.getSiblingDB('snackbar').getCollection('products').exists()" --quiet)
   #       EXISTS_ORDERS=$(mongosh "$MONGO_HOST" --username $MONGODBATLAS_USERNAME  --password $MONGODBATLAS_PASSWORD --eval "db.getSiblingDB('snackbar').getCollection('orders').exists()" --quiet)
#
   #       if [ "$EXISTS_PRODUCTS" = "null" ]; then
   #         echo "Collection 'products' does not exist. Running 02-products-restore.js"
   #         mongosh "$MONGO_HOST" --username $MONGODB_USER --password $MONGODB_PASSWORD --eval "load('02-products-restore.js')"
   #       else
   #         echo "Collection 'products' already exists."
   #       fi
#
   #       if [ "$EXISTS_ORDERS" = "null" ]; then
   #         echo "Collection 'orders' does not exist. Running 03-orders-restore.js"
   #         mongosh "$MONGO_HOST" --username $MONGODB_USER --password $MONGODB_PASSWORD --eval "load('03-orders-restore.js')"
   #       else
   #         echo "Collection 'orders' already exists."
   #       fi

  api_pipeline:
    if: github.event.action == 'api_commit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout API Gateway Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/api-gateway'
          token: ${{ secrets.GH_TOKEN }}

      - name: Deploy API Gateway
        run: terraform apply -auto-approve

  lambda_pipeline:
    if: github.event.action == 'lambda_commit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Lambda Repo
        uses: actions/checkout@v3
        with:
          repository: 'fiap-9soat-snackbar/lambda'
          token: ${{ secrets.GH_TOKEN }}

      - name: Deploy Lambda
        run: terraform apply -auto-approve


